# -*- coding: utf-8 -*-
"""8_Queens_puzzle.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lkwWdStyziWpLdpT6sRxcCPiEDzbeH4w
"""

import random
import matplotlib.pyplot as plt

N = 8  # 8-Queens

def generate_individual():                                                      # 세대생성
    return [random.randint(0, N - 1) for _ in range(N)]

def calculate_fitness(individual):                                              # 적합도 계산
    non_attacking = 28  # 8C2
    attacks = 0
    for i in range(N):
        for j in range(i + 1, N):
            if individual[i] == individual[j] or abs(individual[i] - individual[j]) == abs(i - j):
                attacks += 1
    return non_attacking - attacks

def selection(pop):                                                             # 선택
    total_fitness = sum(calculate_fitness(ind) for ind in pop)
    pick = random.uniform(0, total_fitness)
    current = 0
    for ind in pop:
        current += calculate_fitness(ind)
        if current >= pick:
            return ind
    return pop[0]

def crossover(p1, p2):                                                          # 교차
    point = random.randint(1, N - 2)
    return p1[:point] + p2[point:]

def mutate(ind, rate=0.05):                                                     # 돌연변이
    if random.random() < rate:
        idx = random.randint(0, N - 1)
        ind[idx] = random.randint(0, N - 1)
    return ind

def genetic_algorithm(pop_size=100, max_gen=1000):
    population = [generate_individual() for _ in range(pop_size)]

    for generation in range(max_gen):
        population = sorted(population, key=lambda ind: calculate_fitness(ind), reverse=True)
        if calculate_fitness(population[0]) == 28:
            print(f"🎉 Solution found at generation {generation}")
            return population[0]

        next_gen = population[:10]  # elitism
        while len(next_gen) < pop_size:
            p1 = selection(population)
            p2 = selection(population)
            child = crossover(p1, p2)
            child = mutate(child)
            next_gen.append(child)

        population = next_gen

    print("❌ No solution found.")
    return None

# 시각화 함수
def draw_board(solution):
    fig, ax = plt.subplots()
    # 배경 그리기
    for x in range(N):
        for y in range(N):
            color = 'white' if (x + y) % 2 == 0 else 'gray'
            ax.add_patch(plt.Rectangle((x, y), 1, 1, facecolor=color))

    # 퀸 그리기
    for col, row in enumerate(solution):
        ax.text(col + 0.5, row + 0.5, '♛', fontsize=30, ha='center', va='center', color='red')

    ax.set_xlim(0, N)
    ax.set_ylim(0, N)
    ax.set_xticks([])
    ax.set_yticks([])
    ax.set_aspect('equal')
    plt.gca().invert_yaxis()  # (0,0)을 좌상단으로
    plt.title("8-Queens Solution", fontsize=16)
    plt.show()

# 실행
solution = genetic_algorithm()
if solution:
    print("🧠 Final Solution:", solution)
    draw_board(solution)